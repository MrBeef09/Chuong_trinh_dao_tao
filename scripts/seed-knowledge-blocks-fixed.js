const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function seedKnowledgeBlocks() {
    try {
        console.log('üå± Seeding knowledge blocks...')

        // L·∫•y danh s√°ch majors
        const majors = await prisma.major.findMany()
        console.log(`üìö Found ${majors.length} majors`)

        // D·ªØ li·ªáu kh·ªëi ki·∫øn th·ª©c m·∫´u
        const knowledgeBlocksData = [
            {
                name: 'Ki·∫øn th·ª©c ƒë·∫°i c∆∞∆°ng',
                code: 'GD',
                minCredits: 40,
                maxCredits: 50,
                order: 1
            },
            {
                name: 'Ki·∫øn th·ª©c c∆° s·ªü ng√†nh',
                code: 'CS',
                minCredits: 55,
                maxCredits: 65,
                order: 2
            },
            {
                name: 'Ki·∫øn th·ª©c chuy√™n ng√†nh',
                code: 'CN',
                minCredits: 70,
                maxCredits: 80,
                order: 3
            },
            {
                name: 'Ki·∫øn th·ª©c b·ªï tr·ª£',
                code: 'BT',
                minCredits: 10,
                maxCredits: 20,
                order: 4
            },
            {
                name: 'Th·ª±c t·∫≠p v√† t·ªët nghi·ªáp',
                code: 'TT',
                minCredits: 10,
                maxCredits: 20,
                order: 5
            }
        ]

        // T·∫°o knowledge blocks
        const createdBlocks = []
        for (const blockData of knowledgeBlocksData) {
            try {
                const knowledgeBlock = await prisma.knowledgeBlock.upsert({
                    where: { code: blockData.code },
                    update: {},
                    create: blockData
                })
                createdBlocks.push(knowledgeBlock)
                console.log(`‚úì Created knowledge block: ${knowledgeBlock.name} (${knowledgeBlock.code})`)
            } catch (error) {
                console.log(`‚ùå Error creating knowledge block ${blockData.name}: ${error.message}`)
            }
        }

        // Display summary
        const totalBlocks = await prisma.knowledgeBlock.count()
        console.log(`\nüéâ Successfully created ${createdBlocks.length} knowledge blocks!`)
        console.log(`üìä Total knowledge blocks in database: ${totalBlocks}`)

        // Hi·ªÉn th·ªã danh s√°ch knowledge blocks
        console.log('\nüìã Knowledge Blocks:')
        const allBlocks = await prisma.knowledgeBlock.findMany({
            orderBy: { order: 'asc' }
        })

        allBlocks.forEach((block, index) => {
            console.log(`   ${index + 1}. ${block.name} (${block.code})`)
            console.log(`      Credits: ${block.minCredits}-${block.maxCredits}`)
            console.log('')
        })

    } catch (error) {
        console.error('‚ùå Seeding failed:', error)
    } finally {
        await prisma.$disconnect()
    }
}

// Run if called directly
if (require.main === module) {
    seedKnowledgeBlocks()
}

module.exports = { seedKnowledgeBlocks }
